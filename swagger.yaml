openapi: 3.0.3
info:
  title: Quiz API
  description: API для управления викторинами, пользователями и их ответами.
  version: 1.0.0
servers:
  - url: http://localhost:8080/api
    description: Local development server
paths:
  /auth/login:
    post:
      summary: User login
      description: Аутентификация пользователя.
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginIn'
      responses:
        '200':
          description: Успешная аутентификация.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginOut'
        '400':
          description: Ошибка аутентификации.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      summary: User logout
      description: Завершение сессии пользователя.
      tags:
        - Auth
      responses:
        '200':
          description: Успешный выход из системы.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success

  /auth/register:
    post:
      summary: User registration
      description: Регистрация нового пользователя.
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterIn'
      responses:
        '200':
          description: Успешная регистрация пользователя.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
        '400':
          description: Ошибка регистрации.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user/info/patient:
    post:
      summary: Get patient info
      description: Получает информацию о пациенте по его идентификатору.
      tags:
        - Patient
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetPatientInfoIn'
      responses:
        '200':
          description: Успешный ответ с данными пациента.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPatientInfoOut'
        '400':
          description: Ошибка запроса.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Ошибка сервера.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /questions/start:
    post:
      summary: Start a new quiz
      description: Инициализирует новую сессию викторины и возвращает первый вопрос.
      tags:
        - Quiz
      responses:
        '200':
          description: Успешный старт викторины.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionOut'
        '500':
          description: Ошибка сервера при запуске викторины.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /questions/get:
    post:
      summary: Get next question
      description: Возвращает следующий вопрос викторины.
      tags:
        - Quiz
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionIn'
      responses:
        '200':
          description: Успешное получение следующего вопроса.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionOut'
        '400':
          description: Ошибка запроса.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Ошибка сервера при обработке вопроса.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user/score:
    post:
      summary: Get user's total score
      description: Получает общий результат пользователя для определенной сессии викторины.
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetUserScoreIn'
      responses:
        '200':
          description: Успешный ответ с общим результатом пользователя.
          content:
            application/json:
              schema:
                type: object
                properties:
                  score:
                    type: integer
                    description: Общий результат пользователя.
                    example: 75
        '400':
          description: Ошибка запроса.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Ошибка сервера при получении результата.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user/response/save:
    post:
      summary: Save user's response
      description: Сохраняет ответ пользователя на вопрос викторины.
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaveUserResponseIn'
      responses:
        '200':
          description: Успешное сохранение ответа пользователя.
          content:
            application/json:
              schema:
                type: object
                properties:
                  isFailed:
                    type: boolean
                    description: Указывает, была ли ошибка при сохранении ответа.
                    example: false
        '400':
          description: Ошибка валидации данных запроса.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Ошибка сервера при сохранении ответа.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    LoginIn:
      type: object
      properties:
        username:
          type: string
          description: Логин пользователя.
          example: user@example.com
        password:
          type: string
          description: Пароль пользователя.
          example: secret_password
      required:
        - username
        - password

    LoginOut:
      type: object
      properties:
        userId:
          type: string
          format: uuid
          description: Уникальный идентификатор пользователя.
          example: "123e4567-e89b-12d3-a456-426614174000"

    RegisterIn:
      type: object
      properties:
        username:
          type: string
          example: "mihanynes"
        first_name:
          type: string
          example: "misha"
        middle_name:
          type: string
          example: "andreevich"
        last_name:
          type: string
          example: "petrov"
        email:
          type: string
          example: "mihanynes@aaaa.ru"
        snils:
          type: string
          example: "7777777777"
        password:
          type: string
          example: "11111111"
        password_confirm:
          type: string
          example: "11111111"
        is_admin:
          type: boolean
          example: "false"
      required:
        - first_name
        - last_name
        - email
        - password
        - password_confirm

    GetPatientInfoIn:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
          description: Уникальный идентификатор пользователя.
          example: "123e4567-e89b-12d3-a456-426614174000"

    GetPatientInfoOut:
      type: object
      properties:
        first_name:
          type: string
        middle_name:
          type: string
        last_name:
          type: string
        snils:
          type: string
        email:
          type: string

    QuestionIn:
      type: object
      properties:
        question_text:
          type: string
      required:
        - question_text

    QuestionOut:
      type: object
      properties:
        question_text:
          type: string
        options:
          type: array
          items:
            $ref: '#/components/schemas/Option'
        correlation_id:
          type: string

    Option:
      type: object
      properties:
        answer:
          type: string
        points:
          type: integer
        next_question_text:
          type: string

    SaveUserResponseIn:
      type: object
      properties:
        user_id:
          type: integer
        question_text:
          type: string
        correlation_id:
          type: string
        response_score:
          type: integer
      required:
        - user_id
        - question_text
        - correlation_id
        - response_score

    GetUserScoreIn:
      type: object
      properties:
        user_id:
          type: integer
        correlation_id:
          type: string
      required:
        - user_id
        - correlation_id

    ErrorResponse:
      type: object
      properties:
        error:
          type: string